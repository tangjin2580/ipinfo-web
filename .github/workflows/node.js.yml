name: build and release

on:
  push:
    branches:
      - master  # 或者你想要触发这个工作流的分支名
  workflow_dispatch:  # 允许手动触发工作流

permissions:
  contents: write  # 根据需要设置适当的权限

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Node.js环境
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'  # 指定一个具体的Node.js版本

      - name: 安装依赖
        run: npm install
        # 添加错误处理
        if: success()

      - name: 构建项目
        run: npm run build
        # 添加错误处理
        if: success()

      - name: 获取当前版本号
        id: get_version
        run: |
          # 获取最新的版本号标签
          current_version=$(git tag | grep '^v[0-9]\+\.[0-9]\+$' | sort -V | tail -n 1)
          echo "当前版本号: $current_version"

          # 如果没有找到版本号，默认为 v0.1
          if [ -z "$current_version" ]; then
            current_version="v0.1"
          fi
          echo "默认版本号: $current_version"

          # 提取版本号前缀和后缀
          version_prefix=${current_version%.*}
          version_suffix=${current_version##*.}
          echo "版本号前缀: $version_prefix"
          echo "版本号后缀: $version_suffix"
          
          # 初始化 new_version_suffix
          new_version_suffix=$((version_suffix + 1))

          # 检查标签是否已经存在，如果存在则递增次版本号
          while git tag | grep -q "^${version_prefix}.${new_version_suffix}$"; do
            new_version_suffix=$((new_version_suffix + 1))
          done

          # 拼接新的版本号
          new_version="${version_prefix}.${new_version_suffix}"
          echo "新版本号: $new_version"

          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "生成的新版本号: $new_version"  # 输出新的版本号

      - name: 检查版本号是否已存在
        id: check_release
        run: |
          if git tag | grep -q "^${{ env.new_version }}$"; then
            echo "Release ${{ env.new_version }} 已存在."
            echo "skip_release=true" >> $GITHUB_ENV
          else
            echo "skip_release=false" >> $GITHUB_ENV
          fi

      - name: 创建 Release
        if: env.skip_release == 'false'
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.new_version }}
          release_name: ${{ env.new_version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 压缩dist文件夹
        run: zip -r dist.zip ./dist
        # 添加错误处理
        if: success()

      - name: 上传构建文件到GitHub Release
        if: env.skip_release == 'false'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist.zip
          asset_name: dist.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
